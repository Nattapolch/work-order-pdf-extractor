name: Build Multi-Platform Releases

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    strategy:
      fail-fast: false  # Don't cancel other builds if one fails
      matrix:
        include:
          - os: windows-latest
            executable_name: "WorkOrderExtractor.exe"
            artifact_name: "WorkOrderExtractor-Windows"
            poppler_install: ""
          - os: macos-latest
            executable_name: "WorkOrderExtractor"
            artifact_name: "WorkOrderExtractor-macOS"
            poppler_install: "brew install poppler"
          - os: ubuntu-latest
            executable_name: "WorkOrderExtractor"
            artifact_name: "WorkOrderExtractor-Linux"
            poppler_install: "sudo apt-get update && sudo apt-get install -y poppler-utils"

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install system dependencies
      if: matrix.poppler_install != ''
      run: ${{ matrix.poppler_install }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install pyinstaller
        pip install pdf2image pillow openai PyMuPDF
    
    - name: Test imports
      run: |
        python -c "import tkinter; print('tkinter OK')"
        python -c "import pdf2image; print('pdf2image OK')"
        python -c "import PIL; print('PIL OK')"
        python -c "import openai; print('openai OK')"
    
    - name: Build executable
      run: |
        pyinstaller --clean --onefile --windowed \
          --name "WorkOrderExtractor" \
          --hidden-import="PIL._tkinter_finder" \
          --hidden-import="tkinter" \
          --hidden-import="tkinter.ttk" \
          --hidden-import="pdf2image" \
          --hidden-import="openai" \
          --add-data "*.md:." \
          work_order_extractor.py
    
    - name: Verify executable was created
      shell: bash
      run: |
        ls -la dist/
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          ls -la dist/*.exe
        else
          ls -la dist/WorkOrderExtractor
        fi
    
    - name: Create distribution package
      shell: bash
      run: |
        mkdir -p dist-package
        
        # Copy executable
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp dist/WorkOrderExtractor.exe dist-package/
        else
          cp dist/WorkOrderExtractor dist-package/
          chmod +x dist-package/WorkOrderExtractor
        fi
        
        # Copy documentation
        cp *.md dist-package/ 2>/dev/null || echo "No .md files found"
        
        # Create sample folders
        mkdir -p dist-package/workOrderPDF
        mkdir -p dist-package/workOrderRef  
        mkdir -p dist-package/not_match
        
        # Create sample config
        cat > dist-package/config-sample.json << 'EOF'
        {
          "openai_api_key": "your-api-key-here",
          "selected_model": "gpt-4.1-mini",
          "crop_x1": 0.0,
          "crop_y1": 0.0,
          "crop_x2": 0.25,
          "crop_y2": 0.25,
          "pdf_folder": "workOrderPDF",
          "ref_csv_file": "workOrderRef/MCAN_work_inprogress.csv",
          "not_match_folder": "not_match"
        }
        EOF
        
        # Create usage instructions
        cat > dist-package/README-USAGE.txt << 'EOF'
        Work Order PDF Extractor - Quick Start
        ====================================
        
        1. Setup:
           - Rename config-sample.json to config.json
           - Edit config.json and add your OpenAI API key
        
        2. Prepare files:
           - Put PDF files in workOrderPDF/ folder
           - Put your reference CSV in workOrderRef/ folder
        
        3. Run:
           - Windows: Double-click WorkOrderExtractor.exe
           - Mac/Linux: Open terminal, run ./WorkOrderExtractor
        
        4. Use the app:
           - Settings tab: Verify your API key and model
           - Manual Crop tab: Set crop region if needed
           - Process PDFs tab: Run batch processing
           - Logs tab: View processing details
        
        Need help? Check the included documentation files.
        EOF
    
    - name: Create ZIP archive
      shell: bash
      run: |
        cd dist-package
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          powershell Compress-Archive -Path * -DestinationPath "../${{ matrix.artifact_name }}.zip"
        else
          zip -r "../${{ matrix.artifact_name }}.zip" *
        fi
        cd ..
        ls -la ${{ matrix.artifact_name }}.zip
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}.zip
        retention-days: 90

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Display artifact structure
      run: find artifacts -type f -name "*.zip"
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: "Work Order Extractor ${{ github.ref_name }}"
        body: |
          ## Work Order PDF Extractor ${{ github.ref_name }}
          
          ### ðŸš€ Features
          - Batch PDF processing with OpenAI vision models
          - Manual crop region selection with real-time preview  
          - Match/not match statistics tracking
          - Concurrent processing for improved performance
          - Cost tracking for API usage
          
          ### ðŸ“¦ Downloads
          Choose your platform and download the ZIP file:
          
          - **Windows**: WorkOrderExtractor-Windows.zip
          - **macOS**: WorkOrderExtractor-macOS.zip  
          - **Linux**: WorkOrderExtractor-Linux.zip
          
          ### ðŸ”§ Quick Setup
          1. Download and extract the ZIP for your platform
          2. Rename `config-sample.json` to `config.json`
          3. Edit config.json and add your OpenAI API key
          4. Place PDF files in `workOrderPDF/` folder
          5. Run the executable
          
          ### ðŸ“‹ Requirements
          - OpenAI API key with GPT-4.1 vision access
          - PDF files to process
          - Reference CSV file for work order matching
          
          See README-USAGE.txt in each package for detailed instructions.
        draft: false
        prerelease: false
    
    - name: Upload Windows Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/WorkOrderExtractor-Windows/WorkOrderExtractor-Windows.zip
        asset_name: WorkOrderExtractor-Windows.zip
        asset_content_type: application/zip
    
    - name: Upload macOS Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/WorkOrderExtractor-macOS/WorkOrderExtractor-macOS.zip
        asset_name: WorkOrderExtractor-macOS.zip
        asset_content_type: application/zip
    
    - name: Upload Linux Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/WorkOrderExtractor-Linux/WorkOrderExtractor-Linux.zip
        asset_name: WorkOrderExtractor-Linux.zip
        asset_content_type: application/zip